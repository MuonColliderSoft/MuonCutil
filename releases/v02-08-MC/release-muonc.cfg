##############################################################################
#
# Configuration file for installing MuonCollider Software release V02-08-MC
#
# This cfg file assumes the base-level tools from release_V02-08-MC-base.cfg
# are already installed and available in your system (base-level tools are the
# tools which are set as 'ilcsoft.link' at the end of this file
#
# If you do not have this tools available on your system you can install them
# with the configuration file release_base.cfg
#
# Please do not forget to modify the directories in this cfg file
# according to your system !!
#
# Author: F. Gaede, J. Engels, DESY
# Date: Jun 30, 2010
#
# Update by A. Gianelle, INFN
# Date: Jan, 19 2023
##############################################################################

import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions.py" )
exec(compile(open(versions_file, "rb").read(), versions_file, "exec"))

print("Do we install nightlies? ", nightlies)


# installation directory
if not 'ilcsoft_install_dir' in dir():
    if not 'ilcsoft_install_prefix' in dir():
        # default install prefix
        ilcsoft_install_prefix = "$HOME/ilcsoft"

ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )
ilcsoft = ILCSoft( ilcsoft_install_dir )

# configuration for nightlies
if (nightlies==True):
    ilcsoft_install_dir = ilcsoft = ILCSoft("/scratch/nbuilds/"+date_iso8601)
    ilcsoft.nightlyBuild=True
    ilcsoft.nightlyTargets=['NightlyStart', 'NightlyConfigure', 'NightlyBuild', 'install', 'NightlyTest', 'NightlySubmit']


# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL5)
# --- set in release-versions.py ---
if not 'ilcPath' in dir():
    raise "ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
if not ncores:
   ncores = 8

ilcsoft.env["MAKEOPTS"]="-j" + str(ncores)
ilcsoft.env["CXX"]="/usr/bin/g++"
ilcsoft.env["CC"]="/usr/bin/gcc"

# Set it to false as ilcutil by default set it to ON.
# In this case USE_CXX11 overrides the CMAKE_CXX_STANDARD
ilcsoft.envcmake['USE_CXX11']=False
ilcsoft.envcmake['CMAKE_CXX_STANDARD']=cxx_standard
ilcsoft.envcmake["Boost_NO_BOOST_CMAKE"] = 'ON'

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="ON"

#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Release"

ilcsoft.downloadType = "GitHub"

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/another/path/lib"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/another/path/include"
#-----------------------------------------------

boost_include_dir = "/usr/include/boost/"
boost_lib_dir = "/usr/lib64/boost/"

# cmake
ilcsoft.use( CMake( ilcPath + "CMake/" + CMake_version ))

###########################################################

###################
## Marlin
###################

ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"]='OFF'
ilcsoft.module("Marlin").envcmake["MARLIN_LCCD"]='OFF'

ilcsoft.install( MarlinReco( MarlinReco_version ))
ilcsoft.module("MarlinReco").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("MarlinReco").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("MarlinReco").envcmake["MARLINRECO_FORTRAN"]='OFF'
ilcsoft.module("MarlinReco").reqmodules = [ "Marlin", "MarlinUtil", "MarlinKinfit", "GEAR", "LCIO" ]

ilcsoft.install( MarlinUtil( MarlinUtil_version ))
ilcsoft.module("MarlinUtil").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("MarlinUtil").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("MarlinUtil").reqmodules = [ "Marlin", "GEAR", "LCIO" , "CED" , "DD4hep" ]

ilcsoft.install( DetectorSimulation( DetectorSimulation_version ))
ilcsoft.module("DetectorSimulation").download.gituser = "MuonColliderSoft"

#### DD4HEP #####
## plugin & processor
ilcsoft.install( DD4hep( DD4hep_version )) 
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEAR"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_HEPMC3"]=1
ilcsoft.module("DD4hep").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("DD4hep").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("DD4hep").reqmodules = [ "LCIO", "GEAR" ]

ilcsoft.install( DD4hepExamples ( DD4hepExamples_version ))
ilcsoft.module("DD4hepExamples").reqmodules = [ "DD4hep" , "LCIO", "GEAR" ]
ilcsoft.module("DD4hepExamples").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("DD4hepExamples").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir

ilcsoft.install( MarlinPKG( "MarlinDD4hep", MarlinDD4hep_version ))
ilcsoft.module("MarlinDD4hep").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("MarlinDD4hep").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("MarlinDD4hep").addDependency( [ 'Marlin', 'DD4hep', 'DDKalTest'] )

#### Pandora ####
## plugin & processor
ilcsoft.install( PandoraAnalysis( PandoraAnalysis_version ))
ilcsoft.module("PandoraAnalysis").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("PandoraAnalysis").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("PandoraAnalysis").reqmodules = [ "Marlin", "GEAR", "LCIO", "MarlinUtil" ]

ilcsoft.install( PandoraPFANew( PandoraPFANew_version ))
ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["LC_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["EXAMPLE_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["CMAKE_PREFIX_PATH"]='${ROOTSYS}/cmake'
ilcsoft.module("PandoraPFANew").envcmake["CMAKE_CXX_FLAGS"]='-std=c++%s' % cxx_standard

ilcsoft.install( MarlinPKG( "DDMarlinPandora", DDMarlinPandora_version ))
ilcsoft.module("DDMarlinPandora").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("DDMarlinPandora").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("DDMarlinPandora").envcmake["CMAKE_CXX_FLAGS"]='-Wno-error'
ilcsoft.module("DDMarlinPandora").addDependency( [ 'Marlin', 'MarlinUtil', 'DD4hep', 'PandoraPFANew', 'MarlinTrk'] )
ilcsoft.module("DDMarlinPandora").envcmake["CMAKE_CXX_FLAGS"]='-Wno-error'
ilcsoft.module("DDMarlinPandora").download.gituser = "MuonColliderSoft"

#### LCFI ####
# LCFIVertex
ilcsoft.install( LCFIVertex( LCFIVertex_version ))
ilcsoft.module("LCFIVertex").envcmake["INSTALL_DOC"]="OFF"
ilcsoft.module("LCFIVertex").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("LCFIVertex").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("LCFIVertex").reqmodules = [ "Marlin", "MarlinUtil", "LCIO", "GEAR", "DD4hep" ]
# LCFIPlus
ilcsoft.install( MarlinPKG( "LCFIPlus", LCFIPlus_version ))
ilcsoft.module("LCFIPlus").download.type="GitHub"
ilcsoft.module("LCFIPlus").download.gituser="lcfiplus"
ilcsoft.module("LCFIPlus").download.gitrepo="LCFIPlus"
ilcsoft.module("LCFIPlus").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("LCFIPlus").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )

########### TRACKING session ##################

# Trk
ilcsoft.install( MarlinTrk( MarlinTrk_version ))
ilcsoft.module("MarlinTrk").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("MarlinTrk").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("MarlinTrk").reqmodules = [ "LCIO", "GEAR", "Marlin", "MarlinUtil", "KalTest", "KalDet", "DDKalTest", "DD4hep" , "aidaTT" ]

# TrkProcessor
ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", MarlinTrkProcessors_version ))
ilcsoft.module("MarlinTrkProcessors").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("MarlinTrkProcessors").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk', 'KiTrack', 'KiTrackMarlin'] )
ilcsoft.module("MarlinTrkProcessors").download.gituser = "MuonColliderSoft"
ilcsoft.module("MarlinTrkProcessors").download.branch = "MoveHitsCut"

# ForwardTracking
ilcsoft.install( MarlinPKG( "ForwardTracking", ForwardTracking_version ))
ilcsoft.module("ForwardTracking").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("ForwardTracking").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'Marlin', 'MarlinUtil', 'MarlinTrk'] )
ilcsoft.module("ForwardTracking").download.gituser = "MuonColliderSoft"

# ConformalTracking
ilcsoft.install( MarlinPKG( "ConformalTracking", ConformalTracking_version ))
ilcsoft.module("ConformalTracking").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("ConformalTracking").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("ConformalTracking").addDependency( [ 'LCIO', 'Marlin', 'MarlinTrk'] )
ilcsoft.module("ConformalTracking").download.gituser = "MuonColliderSoft"

#### ACTS  ####
# plugin & processor
acts_idir = "%s/%s/%s" % (ilcsoft_install_dir, 'acts', ACTS_version)
actstrk_idir = "%s/%s/%s" % (ilcsoft_install_dir, 'ACTSTracking', ACTSTracking_version)

ilcsoft.install( ACTS( "acts", ACTS_version ) )
ilcsoft.module("acts").envcmake["CMAKE_INSTALL_PREFIX"]=acts_idir
ilcsoft.module("acts").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("acts").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("acts").download.type = "git"
ilcsoft.module("acts").download.svnurl = "https://gitlab.cern.ch/berkeleylab/MuonCollider/acts"

ilcsoft.install( MarlinPKG( "ACTSTracking", ACTSTracking_version ))
ilcsoft.module("ACTSTracking").envcmake["CMAKE_INSTALL_PREFIX"]=actstrk_idir
ilcsoft.module("ACTSTracking").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("ACTSTracking").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("ACTSTracking").envcmake["nlohmann_json_DIR"]="%s/lib64/cmake/nlohmann_json" % acts_idir
ilcsoft.module("ACTSTracking").download.gituser = "MuonColliderSoft"
ilcsoft.module("ACTSTracking").addDependency( [ 'acts', 'Marlin' ] )

#### KiTrack ####
## plugin & processor
ilcsoft.install( KiTrack( KiTrack_version ))
ilcsoft.module("KiTrack").reqmodules = [ "Marlin" ]

ilcsoft.install( KiTrackMarlin( KiTrackMarlin_version ))
ilcsoft.module("KiTrackMarlin").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("KiTrackMarlin").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("KiTrackMarlin").reqmodules = [ "KiTrack", "MarlinTrk", "DD4hep" ]

#### Kal, Kalman Filter tool ####
ilcsoft.install( DDKalTest( DDKalTest_version ))
ilcsoft.module("DDKalTest").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("DDKalTest").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("DDKalTest").reqmodules = [ "LCIO", "KalTest", "aidaTT" ]

ilcsoft.install( KalTest( KalTest_version ))
ilcsoft.module("KalTest").reqmodules = []

ilcsoft.install( KalDet( KalDet_version ))
ilcsoft.module("KalDet").reqmodules = [ "KalTest", "Marlin", "MarlinUtil", "GEAR" ]

#### Kinfit ####
ilcsoft.install( MarlinPKG( "MarlinKinfit", MarlinKinfit_version ))
ilcsoft.module("MarlinKinfit").hasCMakeFindSupport=True
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'Marlin'] )

ilcsoft.install( MarlinPKG( "MarlinKinfitProcessors", MarlinKinfitProcessors_version ))
ilcsoft.module("MarlinKinfitProcessors").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("MarlinKinfitProcessors").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("MarlinKinfitProcessors").addDependency( [ 'LCIO', 'GEAR', 'Marlin'] )

###################
## Marlin Packages
##################

# FastJet
ilcsoft.install( MarlinPKG( "MarlinFastJet", MarlinFastJet_version ))
ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )

# LCTuple
ilcsoft.install( MarlinPKG( "LCTuple", LCTuple_version ))
ilcsoft.module("LCTuple").addDependency( [ 'LCIO', 'Marlin'] )
ilcsoft.module("LCTuple").supportedTypes = [ "GitHub" ]
ilcsoft.module("LCTuple").download.gituser = "MuonColliderSoft"
ilcsoft.module("LCTuple").download.type="GitHub"

# ClicPerformance
ilcsoft.install( MarlinPKG( "ClicPerformance", ClicPerformance_version ))
ilcsoft.module("ClicPerformance").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("ClicPerformance").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("ClicPerformance").addDependency( [ 'MarlinUtil', 'MarlinTrk', 'ILCUTIL' ] )
ilcsoft.module("ClicPerformance").download.gitrepo="CLICPerformance"

###################
## Additional packages
###################

# CEDViewer
ilcsoft.install( CEDViewer( CEDViewer_version )) 
ilcsoft.module("CEDViewer").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("CEDViewer").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("CEDViewer").reqmodules = [ "Marlin", "MarlinUtil", "LCIO", "GEAR", "CED" ]

# Ovelay
ilcsoft.install( Overlay( Overlay_version ))
ilcsoft.module("Overlay").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("Overlay").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("Overlay").reqmodules = [ "Marlin", "LCIO", "MarlinUtil" ]
ilcsoft.module("Overlay").download.gituser = "MuonColliderSoft"

# lcgeo
ilcsoft.install( lcgeo( lcgeo_version ))
ilcsoft.module("lcgeo").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("lcgeo").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("lcgeo").reqmodules = [ "DD4hep" , "LCIO", "GEAR" ]
ilcsoft.module("lcgeo").download.gituser = "MuonColliderSoft"

# LCIO
ilcsoft.install( LCIO( LCIO_version ))
ilcsoft.module("LCIO").download.gituser = "MuonColliderSoft"
ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='ON'
#ilcsoft.module("LCIO").envcmake['INSTALL_DOC']='OFF'
#ilcsoft.module("LCIO").envcmake['ROOT_HOME']='${ROOTSYS}'
#ilcsoft.module("LCIO").envcmake["BUILD_WITH_DCAP"]="ON"

# GEAR
ilcsoft.install( GEAR( GEAR_version ))
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'
ilcsoft.module("GEAR").reqmodules = []
#ilcsoft.module("GEAR").envcmake["CMAKE_CXX_FLAGS"]='-I/usr/include/c++/6.3.1/'

# Garlic
ilcsoft.install( Garlic( Garlic_version ))
ilcsoft.module("Garlic").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("Garlic").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("Garlic").reqmodules = [ "LCIO", "GEAR", "Marlin", "MarlinUtil" ]

# aidaTT
ilcsoft.install( aidaTT( aidaTT_version )) 
ilcsoft.module("aidaTT").download.type="GitHub"
ilcsoft.module("aidaTT").download.gituser="AIDASoft"
ilcsoft.module("aidaTT").download.gitrepo="aidaTT"
ilcsoft.module("aidaTT").envcmake["BOOST_INCLUDEDIR"]=boost_include_dir
ilcsoft.module("aidaTT").envcmake["BOOST_LIBRARYDIR"]=boost_lib_dir
ilcsoft.module("aidaTT").reqmodules = [ "GBL", "DD4hep" , "LCIO" ]

# raida
ilcsoft.install( RAIDA( RAIDA_version ))
ilcsoft.module("RAIDA").reqmodules = []

# GBL
ilcsoft.install( GBL ( GBL_version ) )
ilcsoft.module("GBL").reqmodules = []

###################
### linked from "base" config file
###################

ilcsoft.link( CED( ilcPath + "CED/" + CED_version ))
ilcsoft.link( SIO( ilcPath + "sio/" + SIO_version ))
ilcsoft.link( FastJet( ilcPath + "FastJet/" + FastJet_version ))
ilcsoft.link( ILCUTIL( ilcPath + "ilcutil/" + ILCUTIL_version ))
#ilcsoft.link( CondDBMySQL( ilcPath + "CondDBMySQL/" + CondDBMySQL_version ))

# mysql
if 'MySQL_path' in dir():
    ilcsoft.use( MySQL( MySQL_path ))

# end of configuration file


